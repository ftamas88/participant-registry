// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	domain "grail-participant-registry/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ParticipantRepository is an autogenerated mock type for the ParticipantRepository type
type ParticipantRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: participant
func (_m *ParticipantRepository) Add(participant domain.Participant) error {
	ret := _m.Called(participant)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Participant) error); ok {
		r0 = rf(participant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *ParticipantRepository) FindAll() ([]domain.Participant, error) {
	ret := _m.Called()

	var r0 []domain.Participant
	if rf, ok := ret.Get(0).(func() []domain.Participant); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: participantID
func (_m *ParticipantRepository) FindByID(participantID domain.ParticipantID) (domain.Participant, error) {
	ret := _m.Called(participantID)

	var r0 domain.Participant
	if rf, ok := ret.Get(0).(func(domain.ParticipantID) domain.Participant); ok {
		r0 = rf(participantID)
	} else {
		r0 = ret.Get(0).(domain.Participant)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ParticipantID) error); ok {
		r1 = rf(participantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: participantID
func (_m *ParticipantRepository) Remove(participantID domain.ParticipantID) error {
	ret := _m.Called(participantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.ParticipantID) error); ok {
		r0 = rf(participantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: participant
func (_m *ParticipantRepository) Update(participant domain.Participant) error {
	ret := _m.Called(participant)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Participant) error); ok {
		r0 = rf(participant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
